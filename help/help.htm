<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="generator" content="pandoc" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes" />
  <title>Advancedform_XH – User Manual</title>
  <style type="text/css">
    body {
        font-family: Georgia, serif;
        line-height: 1.5;
        margin-left: auto;
        margin-right: auto;
        padding-left: 0.5em;
        padding-right: 0.5em;
        background: #ffffe1;
        max-width: 32em;
    }
    p {
        text-align: justify;
    }
    pre {
        color: black;
        background: #ffe;
        overflow: auto;
        padding: 0.2em 0.5em;
        border: 1px solid silver;
    }
  </style>
</head>
<body>
<h1 id="advancedform_xh">Advancedform_XH</h1>
<p>Advancedform_XH facilitates to create your own mail forms for integration into CMSimple_XH. Its possible usage ranges from customized contact forms to complex ordering or booking forms. Even complex forms can be constructed by using the form editor, so you do not have to write any HTML, CSS or PHP, if the basic form functionality is enough for your needs. Advanced customization is available through the template and hook system, respectively.</p>
<ul>
<li><a href="#requirements">Requirements</a></li>
<li><a href="#download">Download</a></li>
<li><a href="#installation">Installation</a></li>
<li><a href="#settings">Settings</a></li>
<li><a href="#usage">Usage</a>
<ul>
<li><a href="#mail-form-administration">Mail form administration</a></li>
<li><a href="#mail-form-editor">Mail form editor</a></li>
<li><a href="#using-the-mail-form">Using the mail form</a></li>
<li><a href="#replacing-the-built-in-mail-form">Replacing the built in mail form</a></li>
<li><a href="#template-system">Template system</a></li>
<li><a href="#hooks">Hooks</a></li>
<li><a href="#demo-forms">Demo forms</a></li>
</ul></li>
<li><a href="#limitations">Limitations</a></li>
<li><a href="#troubleshooting">Troubleshooting</a></li>
<li><a href="#license">License</a></li>
<li><a href="#credits">Credits</a></li>
</ul>
<h2 id="requirements">Requirements</h2>
<p>Advancedform_XH is a plugin for CMSimple_XH ≥ 1.7.0 with the Fa and Jquery plugins, which are available by default. It requires PHP ≥ 5.5.0 with the ctype, filter and hash extensions.</p>
<h2 id="download">Download</h2>
<p>The <a href="https://github.com/cmb69/advancedform_xh/releases/latest">lastest release</a> is available for download on Github.</p>
<h2 id="installation">Installation</h2>
<p>The installation is done as with many other CMSimple_XH plugins.</p>
<ol type="1">
<li>Backup the data on your server.</li>
<li>Unzip the distribution on your computer.</li>
<li>Upload the whole directory <code>advancedform/</code> to your server into the <code>plugins/</code> directory of CMSimple_XH.</li>
<li>Set write permissions to the subdirectories <code>config/</code>, <code>css/</code>, <code>languages/</code> and to the data folder of the plugin.</li>
<li>Protect the data folder of Advancedform_XH against direct access by any means your Webserver provides. <code>.htaccess</code> files for Apache servers are already distributed in the default data folder. Note that the subfolders <code>css/</code> and <code>js/</code> must not deny public access.</li>
<li>Navigate to <code>Plugins</code> → <code>Advancedform</code> in the back-end to check if all requirements are fulfilled.</li>
</ol>
<h2 id="settings">Settings</h2>
<p>The configuration of the plugin is done as with many other CMSimple_XH plugins in the back-end of the Website. Select <code>Plugins</code> → <code>Advancedform</code>.</p>
<p>You can change the default settings of Advancedform_XH under <code>Config</code>. Hints for the options will be displayed when hovering over the help icon with your mouse. The setting <code>php_extension</code> could provide additional security with regard to the template and the hook system, if enabled. However, some of the demo forms do not work in this case.</p>
<p>Localization is done under <code>Language</code>. You can translate the character strings to your own language, if there is no appropriate language file available, or customize them according to your needs.</p>
<p>The look of Advancedform_XH can be customized under <code>Stylesheet</code>. The upper part contains the styling of the forms displayed in the front-end. The mail form is displayed as a table with two columns. The left column shows the labels, the right colum the fields. You can simply adjust the styles for the classes <code>div.advfrm-mailform td.label</code> and <code>div.advfrm-mailform td.field</code>. You can style individual forms by selecting <code>form[name=FORM_NAME]</code>, and even individual fields by selecting <code>#advfrm-FORM_NAME-FIELD_NAME</code>. If you prefer a one column layout, you have to use the <a href="#template-system">template system</a>.</p>
<p>The lower part of the stylesheet contains the styling of the mail form administration and the form editor. If you want to style the property dialogs to fit to your template, you should consider to add jQueryUI theming support to your template. How this can be done is explained in the <a href="https://www.cmsimpleforum.com/viewtopic.php?f=29&amp;t=3435&amp;start=2">CMSimple_XH forum</a>.</p>
<p>Only the first part of the stylesheet above the line</p>
<pre><code>/* END OF MAIL CSS */</code></pre>
<p>will be included inline into the sent HTML mails. So put all style information that is appropriate for the mails at the top of the stylesheet.</p>
<h2 id="usage">Usage</h2>
<h3 id="mail-form-administration">Mail form administration</h3>
<p>In the back-end under <code>Mail Forms</code> there is the list of all defined mail forms. You can add and import new forms and edit, delete, copy and export existing ones. To the right of the mail form is the script code needed to show the according form on a page. Just copy the code and paste it into the desired page.</p>
<h3 id="mail-form-editor">Mail form editor</h3>
<p>The mail form editor allows you to construct your mail forms. The details are explained in the following sections.</p>
<h4 id="general-form-properties">General form properties</h4>
<p>In the upper part of the form editor you can edit the general form properties.</p>
<ul>
<li><code>Name</code>: The name of the form may contain only alphanumeric characters and underscores. It must be unique for all defined forms. It is used to identify the form.</li>
<li><code>Title</code>: The title of the form is used in the mails subject only.</li>
<li><code>To (name)</code>: The name of the recipient of the mail.</li>
<li><code>To (e-mail)</code>: The address of the recipient of the mail.</li>
<li><code>CC</code>: The addresses of the CC recipients of the mail separated by semicolon.</li>
<li><code>BCC</code>: The addresses of the BCC recipients of the mail separated by semicolon.</li>
<li><code>CAPTCHA</code>: Whether a CAPTCHA should be included in the form.</li>
<li><code>Store data</code>: Whether the submitted data should additionally be stored in a CSV file.</li>
<li><code>Thanks page</code>: If empty, after sending the mail the sent information will be displayed. If set and if a sender email address is entered, after sending the mail visitors will be redirected to this page, and a confirmation mail with the sent information will be sent to them.</li>
</ul>
<h4 id="form-fields">Form fields</h4>
<p>In the lower part of the form editor you can edit the fields of the form. Use the tool icons to add, delete or move fields.</p>
<ul>
<li><code>Name</code>: The name of the field may contain only alphanumeric characters and underscores. It must be unique for all defined fields of the current form. It is used to identify the field.</li>
<li><code>Label</code>: The label that should be displayed next to the field.</li>
<li><code>Type</code>: The type of the field. Right to the selectbox is the property tool icon. Click it to open a dialog for editing the properties of the selected field type.</li>
<li><code>Req.</code>: Whether the field is required, i.e. must be filled in by the visitor.</li>
</ul>
<h4 id="field-types">Field types</h4>
<ul>
<li><code>Text</code>: A general text field.</li>
<li><code>Sender (name)</code>: A field to enter the name of the sender. This information will be included in the mail header. At most one field of type <code>Sender (name)</code> may be used for each form.</li>
<li><code>Sender (e-mail)</code>: A field to enter the email address of the sender, which will be validated. This information will be used as Reply-To header field of the mail, and as To header field of the confirmation mail. At most one field of type <code>Sender (e-mail)</code> may be used for each form.</li>
<li><code>E-mail</code>: A field to enter a general email address, which will be validated</li>
<li><code>Date</code>: A field to enter a date, which will be validated. In contemporary browsers, a datepicker is available.</li>
<li><code>Number</code>: A field to enter a non-negative integer, which will be validated.</li>
<li><code>Textarea</code>: A field to enter multi-line texts.</li>
<li><code>Radiobutton</code>: A field to choose one of several options.</li>
<li><code>Checkbox</code>: A field to choose any of several options.</li>
<li><code>Selectbox</code>: A field to choose one of several options.</li>
<li><code>Multi-Selectbox</code>: A field to choose any of several options.</li>
<li><code>Password</code>: A field to enter a password.</li>
<li><code>File</code>: A field to allow the visitor to upload a file as mail attachment. The attachment will not be sent back to the visitor in the confirmation mail.</li>
<li><code>Hidden</code>: A hidden field. Hidden fields will never be shown to the visitor. They might be useful in combination with the template system and the hooks.</li>
<li><code>Output</code>: A field to output arbitrary HTML.</li>
<li><code>Custom</code>: A field that is validated against a given regular expression.</li>
</ul>
<h4 id="field-properties">Field properties</h4>
<p>The field properties are edited in a dialog that is opened by clicking on the property icon. The different field types have different properties that can be set.</p>
<ul>
<li><code>Size</code>: For text fields and such, the width of the field measured in characters. For selectboxes the height of the list. Use 1 for a dropdown box.</li>
<li><code>Orientation</code>: For radiobuttons and checkboxes only: whether these should be displayed horizontally or vertically.</li>
<li><code>Max. length</code>: The maximum number of characters that can be entered. For file fields it specifies the maximum file size in bytes.</li>
<li><code>Cols</code>: The width of the textarea in characters.</li>
<li><code>Rows</code>: The height of the textarea in characters.</li>
<li><code>Default</code>: The default value of the field.</li>
<li><code>Value</code>: The HTML for output fields.</li>
<li><code>File types</code>: For file fields only: a comma separated list of permissible file extensions, e.g. <code>jpeg,jpg,png,gif,bmp</code> for images.</li>
<li><code>Constraint</code>: For custom fields only: the regular expression the value should be checked against.</li>
<li><code>Error message</code>: For custom fields only: the error message that should be displayed, if the value does not match the regular expression. Use <code>%s</code> to insert the label of the field into the message.</li>
</ul>
<p>Radiobuttons, checkboxes and selectboxes allow to enter different options. Use the tool buttons to add, delete and rearrange them. The radiobuttons or checkboxes besides the options allow to specify these as default(s). Use the tool <code>clear defaults</code> to reset them.</p>
<h3 id="using-the-mail-form">Using the mail form</h3>
<p>Edit the page, that you want to display a mail form, and insert the plugin call:</p>
<pre><code>{{{advancedform(&#39;FORM_NAME&#39;)}}}</code></pre>
<p>It might be easiest to just copy&amp;paste the necessary code from the mail form administration.</p>
<p>Now the mail form is ready to be used by the visitors of your Website. They can fill out the form and submit it. If they make any mistakes, e.g. leaving empty an required field, entering an invalid email address or number or specifying a file that is larger than allowed, the form will be displayed again with the already entered input, and with the errors shown above, so the visitors can correct the mistakes and submit the form again. It is not necessary that JavaScript is enabled in the browser of the visitor, but if it is, the first erroneous field will be focused. But none of the field validations relies on JavaScript.</p>
<p>After successful submission of the form, an email will be sent to the receivers (To, CC and BCC) specified in the form editor. Then the sent information is displayed to the visitors as confirmation, or, if a thanks page is specified, the visitors will be redirected there, and a confirmation mail will be sent to them. The thanks page/confirmation feature will only work, if a required field of type <code>Sender (e-mail)</code> is specified for the form, and <code>Mail</code> → <code>Confirmation</code> is enabled in the configuration.</p>
<p>The confirmation mail feature can be abused by anybody, namely by sending abusive contents to an arbitrary recipient by using the email address of that recipient. <strong>Therefore it is highly recommended to have <code>Mail</code> → <code>Confirmation</code> disabled.</strong></p>
<p>Attempts to send an email via Advancedform are logged in the system log of CMSimple_XH (<code>Settings</code> → <code>Log File</code>).</p>
<p>Note that it is possible to have multiple forms on a single page, which can be sent independent from each other.</p>
<h3 id="replacing-the-built-in-mail-form">Replacing the built in mail form</h3>
<p>It is possible to replace the built-in mail form of CMSimple_XH with a user defined one. So just define the desired form, and enter its name in the language settings of Advancedform_XH as <code>contact form</code>. Now the mailform link of CMSimple_XH will directly call your custom form. Note that an email address has to be configured for CMSimple_XH to display the mailform link, but its value is completely ignored by Advancedform_XH.</p>
<p>Alternatively create a hidden CMSimple_XH page and insert the required script code to call the form. Then you have to modify your template. Just replace</p>
<pre><code>&lt;?=mailformlink()?&gt;</code></pre>
<p>with</p>
<pre><code>&lt;?=advancedformlink(&#39;PAGE_URL&#39;)?&gt;</code></pre>
<p>where PAGE_URL should be the part of the URL of the page after the question mark. It is possible to specify multiple <code>advancedformlink()</code>s this way.</p>
<h3 id="template-system">Template system</h3>
<p>The template system allows to build highly customized mail forms. Power users, who need to create or alter mail forms frequently, might have a look at the <a href="https://simplesolutions.dk/?Form_Mailer">Form Mailer</a> by Jerry Jakobsfeld, which is even more versatile than Advancedform_XH.</p>
<p>If a file with the name <code>FORM_NAME.tpl(.php)</code> (where <code>FORM_NAME</code> has to be replaced with the name of the form, e.g. for a form named <code>contact</code>, the filename would be <code>contact.tpl(.php)</code>) is found in the data folder of Advancedform_XH, it will be used as the template file. Additionally the file <code>css/FORM_NAME.css</code>, if it exists, will be included as stylesheet in the CMSimple_XH page and the top of this stylesheet (delimited as for the plugin stylesheet) will be included in the email. And if a file <code>js/FORM_NAME.js</code> exists, it will be included in the page, too.</p>
<p>You can write the template file and its stylesheet manually, but it might be easiest to let Advancedform_XH create a basic one in the mail form administration. By default the generated template files will display the form similar to the one column layout of the original Advancedform. If that is all you want, you are done.</p>
<p>If you want to adjust the styling, have a look at the generated files. In the template file you can see its simplistic structure. Everything is encapsulated within <code>&lt;div&gt;</code>s for flexibility. Have a look at the class of the container-<code>div</code>s. This is set to <code>break</code> by default, so every field will start in a new row. Change it to <code>float</code> and the fields will be put right besides each other. If you want to have the labels to the left of the fields, just remove the comments in the prepared styles for <code>div.label</code> and <code>div.field</code>.</p>
<p>A template file is basically a PHP file with one addition to the syntax:</p>
<pre><code>&lt;?field FIELD_NAME?&gt;</code></pre>
<p>will output the field with the name <code>FIELD_NAME</code>. Do not use any additional characters such as whitespace except a single space between <code>field</code> and <code>FIELD_NAME</code>.</p>
<p>The template file will be evaluated in the context of CMSimple_XH, so any global variables, constants and functions are available to use. However, it is not possible to alter any global variables (besides the superglobals, what might break the working of the system). And do not call non-existent functions as this will cause the PHP interpreter to fail. <strong>Particularly you should be cautious using template files from untrusted sources, as those could contain malicious code that might harm your CMSimple_XH installation.</strong></p>
<p>One particularly useful function is</p>
<pre><code>Advancedform_focusField($form_name, $field_name)</code></pre>
<p>that will set the focus to the given field.</p>
<h3 id="hooks">Hooks</h3>
<p>The hooks are provided to give you even more flexibility, if you are able to write some PHP code. Define them in a file <code>FORM_NAME.inc(.php)</code> (where <code>FORM_NAME</code> has to be replaced with the name of the form, e.g. for a form named <code>contact</code>, the filename would be <code>contact.inc(.php)</code>) in the data folder of Advancedform_XH. Note that this file will be <code>include()</code>d, so it has to be a proper PHP file. The hooks will be called from Advancedform_XH on certain occassions. They are not tied to the template system.</p>
<pre><code>function advfrm_custom_field_default($form_name, $field_name, $opt, $is_resent)</code></pre>
<p>This will be called before the form is sent to the browser. It gives the opportunity to dynamically set default values for fields. Just return the value you want to be used as the default value of the field. If you do not want to change the default value, just return <code>null</code>. The third parameter is set for radiobuttons, checkboxes and selects only. It contains the option, that is currently processed. Return <code>true</code> to check the option, <code>false</code> to uncheck it, or <code>null</code> to use whatever was specified in the form editor. The parameter <code>$is_resent</code> tells whether the form was resent to the browser after submission, because of validation errors. If this is the case the values already entered by the user are sent back instead of the default values specified in the form editor. You might consider to return <code>null</code> in this case, to not overwrite the users input.</p>
<pre><code>function advfrm_custom_valid_field($form_name, $field_name, $value)</code></pre>
<p>This will be called after the form was submitted, and gives the opportunity to add additional validation to the field values. Return <code>true</code>, if the given <code>$value</code> is valid, otherwise return an error message, which will be displayed to the user by Advancedform_XH. For fields of type <code>file</code>, <code>$value</code> is the <code>$_FILES[]</code> array of the given field.</p>
<pre><code>function advfrm_custom_mail($form_name, $mail, $is_confirmation)</code></pre>
<p>This will be called after the <code>$mail</code> object is initialized with all information and just before the mail is sent, and gives the opportunity to alter the <code>$mail</code> object. The parameter <code>$form_name</code> specifies the currently processed form, and the parameter <code>$is_confirmation</code> specifies whether the <code>$mail</code> object contains the information for the mail or the confirmation mail (i.e. the response). If you want to suppress sending of the mail altogether, just return <code>false</code>.</p>
<pre><code>function advfrm_custom_thanks_page($form_name, $fields)</code></pre>
<p>This is called after the mail is sent, and can be utilized to switch to a personalized thanks page. Return the query string (i.e. the part of the URL of the page after the question mark) of the page you want to redirect to. Returning an empty string will redirect to the thanks page that is defined in the form editor. If no default thanks page is defined, the sent information will be displayed. The parameter <code>$fields</code> is an array holding the values of all submitted form fields.</p>
<h3 id="demo-forms">Demo forms</h3>
<p>You should have a look at the shipped demo forms (see <code>data/README</code> for further details) to see what can be done, and how it can be done.</p>
<p><strong>Caution:</strong> of course you are free to use the demo forms as base for your own forms. But as most of the demo forms use the template and hook system, respectively, the result might not be as expected. Either remove the unwanted template/hook files manually, or make a copy of the form in the form administration and use this copy.</p>
<h2 id="limitations">Limitations</h2>
<h3 id="alternative-mailers">Alternative mailers</h3>
<p>The original AdvancedForm supported different kinds of mailers. This appears to be a rarely needed feature. Most Webhosters will provide the possibility to send mail via <code>mail()</code>, which should be easily configured and quite acceptable for the purposes of Advancedform_XH.</p>
<h3 id="spam-protection">Spam protection</h3>
<p>The original Advancedform offered several features regarding spam protection: IP blacklists, a badword filter, a XSS detection facility. The authors of Advancedform_XH are not convinced that these mechanisms are reasonable ways to prevent spam. So none of these are implemented (besides rendering XSS harmless), but instead a CAPTCHA is available. This is only a minimal text-based solution, but more comprehensive CAPTCHAs can be used by means of an additional conforming CAPTCHA plugin. Currently <a href="https://github.com/cmb69/Cryptographp_XH">Cryptographp_XH</a> is available.</p>
<h2 id="troubleshooting">Troubleshooting</h2>
<p>Report bugs and ask for support either on <a href="https://github.com/cmb69/advancedform_xh/issues">Github</a> or in the <a href="https://cmsimpleforum.com/">CMSimple_XH Forum</a>.</p>
<h2 id="license">License</h2>
<p>Advancedform_XH is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.</p>
<p>Advancedform_XH is distributed in the hope that it will be useful, but <em>without any warranty</em>; without even the implied warranty of <em>merchantibility</em> or <em>fitness for a particular purpose</em>. See the GNU General Public License for more details.</p>
<p>You should have received a copy of the GNU General Public License along with Advancedform_XH. If not, see <a href="https://www.gnu.org/licenses/" class="uri">https://www.gnu.org/licenses/</a>.</p>
<p>© 2005-2010 Jan Kanters<br />
© 2011-2021 Christoph M. Becker</p>
<p>Czech translation © 2011-2012 Josef Němec<br />
Danish translation © 2012 Jens Maegard<br />
Estonian translation © 2012 Alo Tänavots<br />
French translation © 2014 Patrick Varlet<br />
Slovak translation © 2012 Dr. Martin Sereday</p>
<h2 id="credits">Credits</h2>
<p>Advancedform_XH is based on AdvancedForm Pro by Jan Kanters. Many thanks to him for giving the permission to use his code for a CMSimple_XH conforming version, and to <em>Holger</em> and <em>johnjdoe</em> who negotiated this permission.</p>
<p>The mail composition and sending is powered by <a href="https://github.com/PHPMailer/PHPMailer">PHPMailer</a>. Many thanks for publishing this advanced mail library under LGPL-2.1.</p>
<p>The regular expression to check for a valid email address is by courtesy of <a href="https://www.regular-expressions.info/email.html">Jan Goyvaerts</a>. Many thanks for the great regular expression tutorial and the examples.</p>
<p>The plugin icon is designed by Jack Cai. Many thanks for publishing it under CC BY-ND.</p>
<p>Many thanks to the community at the <a href="https://cmsimpleforum.com/">CMSimple_XH forum</a> for tips, suggestions and testing. Especially, I want to thank <em>Tata</em> for having the idea to let Advancedform_XH generate a basic template and stylesheet, and <em>manu</em> for requesting the hooks and co-designing their API. And many thanks to <em>maeg</em>, who allowed me to do some debugging on his server, so I was able to find and fix a bug, which caused the sending of mails to fail on several servers.</p>
<p>And last but not least many thanks to <a href="https://www.harteg.dk/">Peter Harteg</a>, the “father” of CMSimple, and all developers of <a href="https://www.cmsimple-xh.org">CMSimple_XH</a> without whom this amazing CMS would not exist.</p>
</body>
</html>
